require 'minitest/autorun'
require_relative 'hamming'

# Common test data version: 2.2.0 4c453c8
class HammingTest < Minitest::Test

  for meth in [:comnpute, :compute_alt] do

    define_method("test_empty_strands_#{meth}") do
      # skip
      assert_equal 0, Hamming.send(meth, '', '')
    end

    define_method("test_single_letter_identical_strands_#{meth}") do
      # skip
      assert_equal 0, Hamming.send(meth, '', '')
    end


    define_method("test_single_letter_different_strands_#{meth}") do
      # skip
      assert_equal 1, Hamming.send(meth, 'G', 'T')
    end

    define_method("test_long_identical_strands_#{meth}") do
      # skip
      assert_equal 0, Hamming.send(meth, 'GGACTGAAATCTG', 'GGACTGAAATCTG')
    end

    define_method("test_long_different_strands_#{meth}") do
      # skip
      assert_equal 9, Hamming.send(meth, 'GGACGGATTCTG', 'AGGACGGATTCT')
    end


    define_method("test_disallow_first_strand_longer_#{meth}") do
      # skip
      assert_raises(ArgumentError) do
        Hamming.send(meth, 'AATG', 'AAA')
      end
    end

    define_method("test_disallow_second_strand_longer_#{meth}") do
      # skip
      assert_raises(ArgumentError) do
        Hamming.send(meth, 'ATA', 'AGTG')
      end
    end


    define_method("test_large_distance_#{meth}") do
      a = 'GTTCCAGGAGTTGAAGTTCGTCACCAGTCGAAGTTCCGCGTTTATATTCTCCCGTAAACGAACCAAGATGTGTTGCACGACCCCATACCGGGTCCACTCATACCCCACAGCAAGGGTTCTACAGTCCATGAGCACACAGCCCCAAGTCAGTTTCAATTCCACACTGAGATTAAGTAACTCTATTACTGCGCTGTTCAACATCGCAGAGGCACCAAAATCTCAACTGTCGGGCAGGACAGGATCCACATACTACTGAGTCCTATCAGACCTTGTTCTAACCCCGATGTGCCAAACCTTCTGGGACTGAATTCATCTGCTGCAAGTTTAGGAGGCGATTAGGACAACCGATCTCCCCGAAGGATTCTAGCTCTATGATCGGCTTTGATCCCCAAGAGGCTCAGGTGCTTAATGGACATGCGGGGTATAACGTCGAAGATTATGATTATCGTTAAGTTGTGCGCTTGCCTGTTCACGGACGACGCTCACGCGTCTCTCAGGCTTCCTTCATCGCCGGGAGGACGGGCCGTGTTACATGGCTAAGGTCTATTACTTATGTCGAAGATTCATGTTTTTAGTAGCGTGAACCTGGAGACTCATGGACTCGAAACCAATATCATACGTCAAGGTTCTAGGCCGTCACCTGGTGCTGATGTGAATAGCCATACGGCAAACGCAGTACCGTTTCCACTCAGCAGACTTGACGAAAGAGCTCCTCCAGATGGTCTCTGTTCGTAGCACGTTGGCGGTTAAGGAGTCCGAGGTTGTAGATCGTATACTAATTCGGCATTTCATAGGGTCCCCGATCTTAAGCAGTCTAACCCACACGTGGTTCCTTGGAGGTACCCTTAGTTCCGTCCAGCTGGCACGGCTGCTAGCATCGATAGCATGTGTCCCTTTAGGTTCTGAGCGAGTCCGCGTCGCTCAAGTTTTACGGCGACTCCTTACGTTGAATACGCCTCGCACTAACTCAGGACCGGGAAGATAACGATGCGGATTTTGGGATGTCTTCGCGAGGGGGCTACGG'
      b = 'CATAATCATCCTTGATGTTCTTTGCCTCGACGGAAGACTAAAGTTTCGTCGCCCACAATTAAGATGCTGATGGCTGGACCAACCATAGCTTAACGCCTAGGATTGCTTTGCTGTCACCAACTTCCGCGGGTGATCTGGCCAAGCTATCACAGTTGATTGTCTTCGTGCCAATTATAAAAAACTCGCTATGAATGCAATTGGCTCCTCTGGGCGTCGACCTTTTGCTCGATAGGGCGGTTAGTATTCAGGTCCTCGCTTCCTCTACCAGCACACGGGCTACGCCGGCTGCATATCATCGGGTCAGGGTATTTGTCGCCTCTCTGGCGCAGAATGTCATACATACGTCTACGACTGACTCGGCCGGTCGCATTGTTTACGGACCCGACGTCCAAGTACGATAACCCCACGCGCGTACGCCAGCAACTATTGATCCAGCTTTATTAAGGTAGGTGGGCGCATTCGCACCCCTCTTAGTAATACCATCTAGAGGACCTCGGATGGGTCTTCCTGTACTTAATTACTTTAATCGATACCTTATTTCGCTAACGACTCGTTGAATTCGTTTTCACCGTCGGCCGTGGACTTCTCGTTACGCCCTTACCCTTTGTGTAGACGATTCCCAGCCATGGACCATCAGTATAGGGCGTGCTGCAGCCTTAGCAGCTATTATGGCGCCTCCGGTAGCAAGATAGAACTATTGCACAAAGAACGGCTATACGCCGAACCATGATTCTTGTGACCAAACCTACAAGGGCGCCTAAGAGCAAACTAGGATTGTGGTTTTTTAGTCGTAAAAGGCTAGCTTCTCGGATTTTACTTTCTCTACGTAACCGTTCGTCCCCTTTCGTATCTTCAAAGTTAGCCAACTGCGCGAGTAGTTAAACTCGCCGGGGCTATTGCAAATGAAGTAATCTTGTATATAGTTCAGAGCTAGTTAATGGTAGTCAGTGGCCGAAGTTTTCGCCTCAGACGAGAATACTAGCACCGATATAAATAGGGGCCTTGATACTTGGAGTGGCGAGCG'
      assert_equal(742, Hamming.compute(a, b))
    end

    define_method("ttest_emtpy_strand_#{meth}") do
      assert_equal(0, Hamming.send(meth, '', ''))
    end

    define_method("ttest_wrong_alpha_#{meth}") do
      # skip
      assert_raises(ArgumentError) do
        Hamming.send(meth, 'ASAUA', 'QRSTW')
      end
    end
  end

end
